; == ACTIONS =============================================================
to check-all-and-swarm
  ask hives[
    if (count (workers-on patch-here) > capacity - 1)[
    swarm-bees
    ]
  ]
end

to swarm-bees
  ask patch-here
  [
    let workers-on-this-patch workers-on self
    
    if ((count workers-on-this-patch) > 6) ; 70% of workers
    [
      let old-queen one-of queens-on myself
      let old-x pxcor
      let old-y pycor
      let old-hive one-of hives-on myself
      
      let next-patch one-of neighbors
      
      if (count hives-on next-patch) > 0
      [ 
        ask other patches
        [
          if(not any? hives-here)
          [set next-patch self]
        ]
      ]
      
      ask next-patch
      [
        let new-x pxcor
        let new-y pycor
        
        if(count hives-here = 0)
        [
          ; Build a hive at this patch if it's empty.
          build-hives 1

          let new-hive one-of hives-on self

          ; Send 70% of the workers to the new hive.
          move-workers 0.7 workers-on-this-patch new-x new-y new-hive

          ; Send the old queen to the new hive. A new queen will be born at
          ; and take command of the old one.
          move-queen old-queen new-x new-y new-hive
          birth-queens 1 old-x old-y old-hive

          ask mites[
            if current-host = NOBODY
            [
              find-new-host self ;catches an error where the bee has no host
            ]
            move-to current-host
          ]
        ]
      ]
    ]
  ]
end

; Birth bees (very placeholder-y)
to bees-reproduce
  ask queens[  
    let queen-x xcor
    let queen-y ycor
    let hive current-hive
    
    ask patch-here
    [birth-workers 3 queen-x queen-y hive]
  ]
end

to reproduce-mites
ask hives[
  ask patch-here
  [birth-mites 1 pxcor pycor (one-of workers-here)]
]
   
end
; == END ACTIONS =========================================================
